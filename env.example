# Multi-Agent Software Development System Environment Variables
# Copy this file to .env and fill in your actual values

# Application Settings
APP_NAME="Multi-Agent Software Development System"
APP_VERSION="1.0.0"
APP_DEBUG=true
APP_LOG_LEVEL="INFO"

# Database Configuration
DATABASE_TYPE="sqlite"
DATABASE_PATH="./database/agents.db"
DATABASE_BACKUP_ENABLED=true
DATABASE_BACKUP_INTERVAL=3600

# API Configuration
API_HOST="0.0.0.0"
API_PORT=8000
API_WORKERS=4
API_TIMEOUT=30

# AI Model API Keys
OPENAI_API_KEY="your-openai-api-key-here"
ANTHROPIC_API_KEY="your-anthropic-api-key-here"
GOOGLE_API_KEY="your-google-api-key-here"

# LLM Configuration
# Default LLM provider (ollama, openai, claude, gemini)
DEFAULT_LLM_PROVIDER="openai"
# Default LLM deployment (local, cloud)
DEFAULT_LLM_DEPLOYMENT="cloud"
# Default model name
DEFAULT_LLM_MODEL="gpt-4"
# Ollama server URL (for local deployment)
OLLAMA_BASE_URL="http://localhost:11434"

# Slack Integration (Phase 3) - Requirements Intake & Communication
# Set to true to enable Slack integration
SLACK_ENABLED=false

# Slack Bot Token (required for sending messages and processing events)
# Get this from: https://api.slack.com/apps -> Your App -> OAuth & Permissions -> Bot User OAuth Token
SLACK_BOT_TOKEN="xoxb-your-bot-token-here"

# Slack Webhook URL (optional - for incoming webhooks)
# Get this from: https://api.slack.com/apps -> Your App -> Incoming Webhooks
SLACK_WEBHOOK_URL="https://hooks.slack.com/services/YOUR/WEBHOOK/URL"

# Slack App Token (optional - for socket mode, future use)
# Get this from: https://api.slack.com/apps -> Your App -> Basic Information -> App-Level Tokens
SLACK_APP_TOKEN="xapp-your-app-token-here"

# Slack Channels (comma-separated list of channel names or IDs)
# Examples: "general,code-reviews,security-alerts" or "C1234567890,C0987654321"
SLACK_CHANNELS="general,code-reviews,security-alerts"

# GitHub Integration (Phase 4)
GITHUB_ENABLED=false
GITHUB_ACCESS_TOKEN="your-github-access-token-here"
GITHUB_WEBHOOK_SECRET="your-github-webhook-secret-here"
GITHUB_REPOSITORIES="owner/repo1,owner/repo2"

# Logging Configuration
LOG_LEVEL="INFO"
LOG_FORMAT="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
LOG_FILE="./logs/app.log"
LOG_MAX_SIZE=10485760
LOG_BACKUP_COUNT=5

# Security Settings
SECRET_KEY="your-secret-key-here-change-this-in-production"
ENVIRONMENT="development"  # development, staging, production

# =============================================================================
# SLACK SETUP INSTRUCTIONS
# =============================================================================
#
# To enable Slack integration:
#
# 1. Create a Slack App:
#    - Go to https://api.slack.com/apps
#    - Click "Create New App" -> "From scratch"
#    - Name your app (e.g., "Agentic Developer System")
#    - Select your workspace
#
# 2. Configure Bot Token Scopes:
#    - Go to "OAuth & Permissions"
#    - Add these Bot Token Scopes:
#      * chat:write (send messages)
#      * channels:read (list channels)
#      * channels:history (read messages)
#      * files:read (read uploaded files)
#      * app_mentions:read (respond to mentions)
#      * users:read (get user info)
#
# 3. Install the App:
#    - Go to "OAuth & Permissions"
#    - Click "Install to Workspace"
#    - Copy the "Bot User OAuth Token" (starts with xoxb-)
#
# 4. Configure Event Subscriptions (for webhooks):
#    - Go to "Event Subscriptions"
#    - Enable Events
#    - Set Request URL to: https://your-domain.com/integrations/slack/webhook
#    - Subscribe to these events:
#      * message.channels (receive messages)
#      * app_mention (respond to mentions)
#      * file_shared (process uploaded files)
#
# 5. Update your .env file:
#    - Set SLACK_ENABLED=true
#    - Set SLACK_BOT_TOKEN to your bot token
#    - Set SLACK_CHANNELS to your desired channels
#
# 6. Test the integration:
#    - Run: python test_slack_integration.py
#    - Check the test results
#
# ============================================================================= 